{"version":3,"sources":["NotablesCard.tsx","AllNotables.tsx","AllJewels.tsx","SingleNotable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Wrapper","styled","Link","display","padding","backgroundColor","border","textDecoration","transition","TextContainer","div","flexDirection","flexGrow","color","marginLeft","Title","h3","fontSize","margin","marginBottom","Description","p","lineHeight","MetaInfo","fontStyle","marginTop","Icon","backgroundSize","flexShrink","position","content","top","left","right","bottom","mixBlendMode","icon","backgroundImage","process","isKeystone","width","height","NotableCard","notable","name","stats","skill","type","weight","totalWeight","to","map","text","key","toFixed","Container","gridTemplateColumns","overflowY","overflowX","gridGap","borderRight","OuterWrapper","overflow","Input","input","InputWrapper","background","alignItems","Clear","button","outline","cursor","transform","borderRadius","More","formattedNotables","Notables","n","item","List","React","memo","term","fuse","useRef","Fuse","threshold","distance","includeScore","keys","current","result","search","rest","length","single","slice","AllNotables","initialValue","split","reduce","acc","s","getParams","useLocation","useState","setTerm","debouncedTerm","setDebouncedTerm","hist","useHistory","bounce","useEffect","window","clearTimeout","setTimeout","replace","onChange","value","target","placeholder","onClick","JewelSectionHeader","Jewel","Enchantment","marginRight","NotablesContainer","JewelHeader","borderBottom","expanded","SingleJewel","jewel","enchant","notables","tag","prefixWeight","suffixWeight","setExpanded","e","sort","a","b","find","JewelSection","jewels","AllJewels","Jewels","filter","size","Notable","id","useParams","parseInt","appearsOn","some","maxWidth","Box","TabsContainer","Tab","shouldForwardProp","prop","zIndex","isActive","Tabs","location","pathname","App","path","SingleNotable","exact","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"orzDAKMA,EAAUC,YAAOC,IAAPD,CAAa,CAC3BE,QAAS,OACTC,QAAS,MACTC,gBAAiB,OACjBC,OAAQ,iBACRC,eAAgB,OAChBC,WAAY,wBACZ,SAAU,CACRH,gBAAiB,aAIfI,EAAgBR,IAAOS,IAAI,CAC/BP,QAAS,OACTQ,cAAe,SACfC,SAAU,EACVC,MAAO,QACPC,WAAY,QAGRC,EAAQd,IAAOe,GAAG,CACtBC,SAAU,OACVC,OAAQ,EACRC,aAAc,QAGVC,EAAcnB,IAAOoB,EAAE,CAC3BJ,SAAU,OACVK,WAAY,OACZJ,OAAQ,YAGJK,EAAWtB,YAAOmB,EAAPnB,CAAoB,CACnCY,MAAO,OACPW,UAAW,SACXC,UAAW,SAGPC,EAAOzB,IAAOS,IAClB,CACEiB,eAAgB,QAChBC,WAAY,EACZhB,SAAU,EACViB,SAAU,WACVxB,gBAAiB,OACjB,SAAU,CACRF,QAAS,QACT2B,QAAQ,KACRD,SAAU,WACVE,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACR5B,OAAQ,qCACR6B,aAAc,aAGlB,gBAAGC,EAAH,EAAGA,KAAH,MAAe,CACbC,gBAAgB,OAAD,OAASC,gBAAT,OAAkCF,EAAlC,SAEjB,gBAAGG,EAAH,EAAGA,WAAH,MAAqB,CACnBC,MAAOD,EAAa,OAAS,OAC7BE,OAAQF,EAAa,OAAS,WA8BnBG,EA1BK,SAAC,GAAD,QAClBC,QAAWC,EADO,EACPA,KAAMC,EADC,EACDA,MAAOT,EADN,EACMA,KAAMG,EADZ,EACYA,WAAYO,EADxB,EACwBA,MAAOC,EAD/B,EAC+BA,KACjDC,EAFkB,EAElBA,OAFkB,IAGlBC,mBAHkB,MAGJ,EAHI,SASlB,kBAACjD,EAAD,CAASkD,GAAE,mBAAcJ,IACvB,kBAACpB,EAAD,CAAMU,KAAMA,EAAMG,WAAYA,IAC9B,kBAAC9B,EAAD,KACE,kBAACM,EAAD,KAAQ6B,GACPC,EAAMM,KAAI,SAACC,EAAMC,GAAP,OACT,kBAACjC,EAAD,CAAaiC,IAAKA,GAAMD,MAEzBJ,GACC,kBAACzB,EAAD,KACGwB,EADH,aACmBC,EADnB,OACgCA,EAASC,EAAe,KAAKK,QAAQ,GADrE,Q,wBChFFC,EAAYtD,IAAOS,IAA0B,CACjDP,QAAS,OACTqD,oBAAqB,uCACrBC,UAAW,OACXC,UAAW,SACXC,QAAS,OACT,sBAAuB,CACrBnB,MAAO,OACPoB,YAAa,kBAEf,4BAA6B,CAC3BA,YAAa,oBAIXC,EAAe5D,IAAOS,IAAI,CAC9BP,QAAS,OACTQ,cAAe,SACf6B,MAAO,OACPsB,SAAU,SACV1D,QAAS,SAGL2D,EAAQ9D,IAAO+D,MAAM,CACzB5D,QAAS,YACTa,SAAU,OACVL,SAAU,EACVN,OAAQ,SAGJ2D,EAAehE,IAAOS,IAAI,CAC9BP,QAAS,OACT+D,WAAY,OACZhD,OAAQ,WACRiD,WAAY,WAGRC,EAAQnE,IAAOoE,OAAO,CAC1B,SAAU,CAAEC,QAAS,QACrBC,OAAQ,UACRL,WAAY,OACZ5D,OAAQ,OACRF,QAAS,gBACTqC,OAAQ,OACRZ,SAAU,WACV1B,QAAS,OACTQ,cAAe,cACfwD,WAAY,SACZ,kBAAmB,CACjBrC,QAAQ,KACR3B,QAAS,QACTqC,MAAO,MACPC,OAAQ,OACRyB,WAAY,OACZM,UAAW,iBACXC,aAAc,MACd3D,WAAY,QAEd,UAAW,CAAE0D,UAAW,qBAGpBE,EAAOzE,IAAOS,IAAI,CACtBG,MAAO,UAGH8D,EAAqBC,EAA2BzB,KAAI,SAAC0B,GAAD,MAAQ,CAAEC,KAAMD,MAapEE,EAAOC,IAAMC,MACjB,YAAiC,IAA9BC,EAA6B,EAA7BA,KACgBC,EAASC,iBACxB,IAAIC,IAAKT,EAA2B,CAClCU,UAAW,IACXC,SAAU,IACVC,cAAc,EACdC,KAAM,CACJ,CACE7C,KAAM,QACNI,OAAQ,IAEV,CACEJ,KAAM,OACNI,OAAQ,QAZR0C,QAkBFC,EAAST,EAAOC,EAAKS,OAAOV,GAAQP,EAEpCkB,EAAOF,EAAOG,OAjCJ,GAmChB,OACE,kBAACvC,EAAD,CAAWwC,OAA0B,IAAlBJ,EAAOG,QACvBH,EAAOK,MAAM,EArCF,IAqCkB7C,KAAI,gBAASR,EAAT,EAAGmC,KAAH,OAChC,kBAAC,EAAD,CAAazB,IAAKV,EAAQC,KAAMD,QAASA,OAE1CkD,EAAO,GAAK,kBAACnB,EAAD,gBAAemB,EAAf,aAInB,uBAAGX,OAAH,EAAuBA,QAwCVe,EArCK,WAAO,IAErBC,EA/CY,SAACN,GAAD,OAChBA,EACGI,MAAM,GACNG,MAAM,KACNC,QACC,SAACC,EAAKC,GAAN,sBAAkBD,EAAlB,eAAwBC,EAAEH,MAAM,KAAK,GAAKG,EAAEH,MAAM,KAAK,KAAM,MAC7D,IAyCeI,CADAC,cAAXZ,QAC6BU,EACrCJ,EAAuC,kBAAjBA,EAA4BA,EAAe,GAHzC,MAIAO,mBAASP,GAJT,mBAIjBhB,EAJiB,KAIXwB,EAJW,OAKkBD,mBAASP,GAL3B,mBAKjBS,EALiB,KAKFC,EALE,KAMlBC,EAAOC,cAEPC,EAAS3B,mBAaf,OAXA4B,qBAAU,WAQR,OAPI9B,IAASyB,IACXM,OAAOC,aAAaH,EAAOrB,SAC3BqB,EAAOrB,QAAUuB,OAAOE,YAAW,WACjCN,EAAKO,QAAQlC,EAAI,aAASA,GAAS,IACnC0B,EAAiB1B,KAChB,MAEE,kBAAM+B,OAAOC,aAAaH,EAAOrB,YACvC,CAACR,EAAM2B,EAAMF,IAGd,kBAAC9C,EAAD,KACE,kBAACI,EAAD,KACE,kBAACF,EAAD,CACEsD,SAAU,gBAAaC,EAAb,EAAGC,OAAUD,MAAb,OAA2BZ,EAAQY,IAC7CA,MAAOpC,EACPnC,KAAK,OACLyE,YAAY,0CAEbtC,GAAQ,kBAACd,EAAD,CAAOqD,QAAS,kBAAMf,EAAQ,QAEzC,kBAAC3B,EAAD,CAAMG,KAAMyB,M,QCnJZpD,EAAYtD,IAAOS,IAAI,CAC3BP,QAAS,OACTqD,oBAAqB,MACrBG,QAAS,OACTF,UAAW,OACXC,UAAW,SACX,sBAAuB,CACrBlB,MAAO,OACPoB,YAAa,kBAEf,4BAA6B,CAC3BA,YAAa,oBAIX8D,EAAqBzH,IAAOe,GAAG,CACnC,kBAAmB,CAAES,UAAW,GAChCP,OAAQ,YAGJyG,EAAQ1H,IAAOS,IAAI,CACvBL,gBAAiB,OACjBD,QAAS,MACTD,QAAS,OACTQ,cAAe,SACfkB,SAAU,aAGN+F,EAAc3H,IAAOS,IAAI,CAC7BG,MAAO,YACPS,WAAY,OACZL,SAAU,OACV4G,YAAa,SAGThE,EAAe5D,IAAOS,IAAI,CAC9BP,QAAS,OACTQ,cAAe,SACf6B,MAAO,OACPsB,SAAU,SACV1D,QAAS,SAGL0H,EAAoB7H,IAAOS,IAAI,CACnCe,UAAW,MACXtB,QAAS,OACTqD,oBAAqB,uCACrBG,QAAS,QAGLoE,EAAc9H,IAAOoE,OACzB,CACExC,SAAU,WACVvB,OAAQ,OACRH,QAAS,OACTQ,cAAe,SACfuD,WAAY,OACZK,OAAQ,UACR,SAAU,CAAED,QAAS,QACrB,SAAU,CACRxC,QAAQ,KACRD,SAAU,WACV1B,QAAS,QACT8B,MAAO,MACPO,MAAO,EACPC,OAAQ,EACRnC,OAAQ,wBACRsD,YAAa,iBACboE,aAAc,oBAGlB,gBAAGC,EAAH,EAAGA,SAAH,MAAmB,CACjB,SAAU,CACRzD,UAAU,WAAD,OAAayD,EAAW,MAAQ,KAAhC,QACTlG,IAAKkG,EAAW,MAAQ,OAKjBC,EAAc,SAAC,GAIrB,IAAD,IAHJC,MAASC,EAGL,EAHKA,QAASC,EAGd,EAHcA,SAAUC,EAGxB,EAHwBA,IAAKC,EAG7B,EAH6BA,aAAcC,EAG3C,EAH2CA,aAG3C,EAC4B/B,oBAAS,GADrC,mBACGwB,EADH,KACaQ,EADb,KAGJ,OACE,kBAACd,EAAD,KACE,kBAACI,EAAD,CAAaN,QAAS,kBAAMgB,GAAaR,IAAWA,SAAUA,GAC3DG,EAAQjF,KAAI,SAACuF,GAAD,OACX,kBAACd,EAAD,CAAavE,IAAKqF,GAAIA,OAGzBT,GACC,kBAACH,EAAD,KACGO,EACEM,MAAK,SAACC,EAAGC,GAAJ,OACJD,EAAE7F,OAAS8F,EAAE9F,KACE,WAAX6F,EAAE7F,KACA,GACC,EACH8F,EAAE7F,OAAS4F,EAAE5F,UAElBG,KAAI,gBAAGL,EAAH,EAAGA,MAAH,OACF8B,EAA2BkE,MAAK,SAACjE,GAAD,OAAOA,EAAE/B,QAAUA,QAErDK,KACC,SAACR,GAAD,aACEA,GACE,kBAAC,EAAD,CACEU,IAAKV,EAAQG,MACbE,OAAM,UAAEL,EAAQK,cAAV,aAAE,EAAiBsF,GACzBrF,YACmB,WAAjBN,EAAQI,KAAoByF,EAAeD,EAE7C5F,QAASA,UAUvBoG,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACnB,oCACGA,EAAO7F,KAAI,SAACgF,GAAD,OACV,kBAAC,EAAD,CAAa9E,IAAK8E,EAAMvF,KAAMuF,MAAOA,SAwB5Bc,EAnBG,kBAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAACvB,EAAD,cACA,kBAAC,EAAD,CACEsB,OAASE,EAAuBC,QAAO,kBAAuB,UAAvB,EAAGC,UAE5C,kBAAC1B,EAAD,eACA,kBAAC,EAAD,CACEsB,OAASE,EAAuBC,QAAO,kBAAuB,WAAvB,EAAGC,UAE5C,kBAAC1B,EAAD,cACA,kBAAC,EAAD,CACEsB,OAASE,EAAuBC,QAAO,kBAAuB,UAAvB,EAAGC,aChJ5C7F,EAAYtD,IAAOS,IAAI,CAC3BP,QAAS,OACTqD,oBAAqB,MACrBG,QAAS,OACTF,UAAW,OACXC,UAAW,SACX,sBAAuB,CACrBlB,MAAO,OACPoB,YAAa,kBAEf,4BAA6B,CAC3BA,YAAa,oBAIXC,EAAe5D,IAAOS,IAAI,CAC9BP,QAAS,OACTQ,cAAe,SACf6B,MAAO,OACPsB,SAAU,SACV1D,QAAS,SA4BIiJ,EAzBC,WAAO,IACbC,EAAOC,cAAPD,GACFxG,EAAsB,kBAAPwG,EAAkBE,SAASF,EAAI,IAAM,EAEpD3G,EAAW0F,EAA2BS,MAC1C,qBAAGhG,QAA+BA,KAG9B2G,EAAaT,EAAuBG,QAAO,qBAAGd,SACzCqB,MAAK,qBAAG5G,QAA+BA,QAGlD,OAAOH,EACL,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAaU,IAAKV,EAAQG,MAAOH,QAASA,IACzC8G,GACCA,EAAUtG,KAAI,SAACgF,GAAD,OACZ,kBAAC,EAAD,CAAa9E,IAAK8E,EAAMvF,KAAMuF,MAAOA,SAI3C,MCxCAtE,EAAe5D,IAAOS,IAAI,CAC9BoD,SAAU,SACVrB,OAAQ,QACRD,MAAO,QACPnC,gBAAiB,SAGbkD,EAAYtD,IAAOS,IAAI,CAC3BP,QAAS,OACTQ,cAAe,SACfwD,WAAY,UACZjD,OAAQ,SACRyI,SAAU,QACV,4CAA6C,CAC3CvJ,QAAS,QAEXqC,OAAQ,SAGJmH,EAAM3J,IAAOS,IAAI,CACrBL,gBAAiB,QACjBQ,MAAO,QACPV,QAAS,OACTQ,cAAe,SACfmD,SAAU,WAGN+F,EAAgB5J,IAAOS,IAAI,CAC/BsH,aAAc,mBACd7H,QAAS,OACT0B,SAAU,WACV,UAAW,CACTC,QAAQ,KACRI,OAAQ,IACRM,MAAO,OACPrC,QAAS,QACTsC,OAAQ,MACRZ,SAAU,WACVxB,gBAAiB,UAIfyJ,EAAM7J,YAAOC,IAAM,CAAE6J,kBAAmB,SAAAC,GAAI,MAAa,aAATA,IAA1C/J,CAGV,CACE4H,YAAa,MACbtH,eAAgB,OAChBH,QAAS,MACT6J,OAAQ,IAEV,gBAAGC,EAAH,EAAGA,SAAH,MAAmB,CACjB7J,gBAAiB6J,EAAW,SAAW,OACvCrJ,MAAOqJ,EAAW,OAAS,aAIzBC,EAAO,WACX,IAAMC,EAAW5D,cAEjB,OACE,kBAACqD,EAAD,KACE,kBAACC,EAAD,CAAK5G,GAAG,IAAIgH,SAAgC,MAAtBE,EAASC,UAA/B,gBAGA,kBAACP,EAAD,CAAK5G,GAAG,UAAUgH,SAAgC,YAAtBE,EAASC,UAArC,oBA+BSC,EAxBH,kBACV,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAACV,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,KAAK,gBACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOE,OAAK,EAACF,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAUrH,GAAG,YC1FLwH,QACW,cAA7BzD,OAAOmD,SAASO,UAEe,UAA7B1D,OAAOmD,SAASO,UAEhB1D,OAAOmD,SAASO,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c20a36a4.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Link } from \"react-router-dom\";\nimport { NotableType } from \"./types\";\n\nconst Wrapper = styled(Link)({\n  display: \"flex\",\n  padding: \"8px\",\n  backgroundColor: \"#111\",\n  border: \"1px solid #222\",\n  textDecoration: \"none\",\n  transition: \"background-color 0.3s\",\n  \":hover\": {\n    backgroundColor: \"#1A1A1A\",\n  },\n});\n\nconst TextContainer = styled.div({\n  display: \"flex\",\n  flexDirection: \"column\",\n  flexGrow: 1,\n  color: \"white\",\n  marginLeft: \"8px\",\n});\n\nconst Title = styled.h3({\n  fontSize: \"16px\",\n  margin: 0,\n  marginBottom: \"8px\",\n});\n\nconst Description = styled.p({\n  fontSize: \"12px\",\n  lineHeight: \"16px\",\n  margin: \"0 0 4px\",\n});\n\nconst MetaInfo = styled(Description)({\n  color: \"#666\",\n  fontStyle: \"italic\",\n  marginTop: \"auto\",\n});\n\nconst Icon = styled.div<{ isKeystone?: boolean; icon: string }>(\n  {\n    backgroundSize: \"cover\",\n    flexShrink: 0,\n    flexGrow: 0,\n    position: \"relative\",\n    backgroundColor: \"#222\",\n    \":after\": {\n      display: \"block\",\n      content: `\"\"`,\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      border: \"1px solid rgba(255, 255, 255, 0.7)\",\n      mixBlendMode: \"overlay\",\n    },\n  },\n  ({ icon }) => ({\n    backgroundImage: `url(${process.env.PUBLIC_URL}${icon})`,\n  }),\n  ({ isKeystone }) => ({\n    width: isKeystone ? \"64px\" : \"48px\",\n    height: isKeystone ? \"64px\" : \"48px\",\n  })\n);\n\nconst NotableCard = ({\n  notable: { name, stats, icon, isKeystone, skill, type },\n  weight,\n  totalWeight = 1,\n}: {\n  notable: NotableType;\n  weight?: number;\n  totalWeight?: number;\n}) => (\n  <Wrapper to={`/notable/${skill}`}>\n    <Icon icon={icon} isKeystone={isKeystone} />\n    <TextContainer>\n      <Title>{name}</Title>\n      {stats.map((text, key) => (\n        <Description key={key}>{text}</Description>\n      ))}\n      {weight && (\n        <MetaInfo>\n          {type}, weight: {weight}, ~{((weight / totalWeight) * 100).toFixed(2)}\n          %\n        </MetaInfo>\n      )}\n    </TextContainer>\n  </Wrapper>\n);\n\nexport default NotableCard;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport styled from \"@emotion/styled\";\nimport Notables from \"./notables.json\";\nimport NotableCard from \"./NotablesCard\";\nimport Fuse from \"fuse.js\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { NotableType } from \"./types\";\n\nconst Container = styled.div<{ single?: boolean }>({\n  display: \"grid\",\n  gridTemplateColumns: \"repeat(auto-fit, minmax(320px, 1fr))\",\n  overflowY: \"auto\",\n  overflowX: \"hidden\",\n  gridGap: \"16px\",\n  \"::-webkit-scrollbar\": {\n    width: \"16px\",\n    borderRight: \"8px solid #111\",\n  },\n  \"::-webkit-scrollbar-thumb\": {\n    borderRight: \"8px solid #222\",\n  },\n});\n\nconst OuterWrapper = styled.div({\n  display: \"flex\",\n  flexDirection: \"column\",\n  width: \"100%\",\n  overflow: \"hidden\",\n  padding: \"16px\",\n});\n\nconst Input = styled.input({\n  padding: \"12px 16px\",\n  fontSize: \"16px\",\n  flexGrow: 1,\n  border: \"none\",\n});\n\nconst InputWrapper = styled.div({\n  display: \"flex\",\n  background: \"#FFF\",\n  margin: \"0 0 16px\",\n  alignItems: \"center\",\n});\n\nconst Clear = styled.button({\n  \":focus\": { outline: \"none\" },\n  cursor: \"pointer\",\n  background: \"none\",\n  border: \"none\",\n  padding: \"0 24px 0 27px\",\n  height: \"100%\",\n  position: \"relative\",\n  display: \"flex\",\n  flexDirection: \"row-reverse\",\n  alignItems: \"center\",\n  \":after, :before\": {\n    content: `\"\"`,\n    display: \"block\",\n    width: \"3px\",\n    height: \"24px\",\n    background: \"#777\",\n    transform: \"rotateZ(45deg)\",\n    borderRadius: \"2px\",\n    marginLeft: \"-3px\",\n  },\n  \":before\": { transform: \"rotateZ(-45deg)\" },\n});\n\nconst More = styled.div({\n  color: \"white\",\n});\n\nconst formattedNotables = (Notables as NotableType[]).map((n) => ({ item: n }));\n\nconst maxNotables = 30;\n\nconst getParams = (search: string) =>\n  search\n    .slice(1)\n    .split(\"&\")\n    .reduce<{ [x: string]: boolean | string }>(\n      (acc, s) => ({ ...acc, [s.split(\"=\")[0]]: s.split(\"=\")[1] || true }),\n      {}\n    );\n\nconst List = React.memo(\n  ({ term }: { term: string }) => {\n    const { current: fuse } = useRef(\n      new Fuse(Notables as NotableType[], {\n        threshold: 0.15,\n        distance: 1000,\n        includeScore: true,\n        keys: [\n          {\n            name: \"stats\",\n            weight: 0.5,\n          },\n          {\n            name: \"name\",\n            weight: 0.5,\n          },\n        ],\n      })\n    );\n\n    const result = term ? fuse.search(term) : formattedNotables;\n\n    const rest = result.length - maxNotables;\n\n    return (\n      <Container single={result.length === 1}>\n        {result.slice(0, maxNotables).map(({ item: notable }) => (\n          <NotableCard key={notable.name} notable={notable} />\n        ))}\n        {rest > 0 && <More>... And {rest} more</More>}\n      </Container>\n    );\n  },\n  ({ term: prevTerm }, { term }) => prevTerm === term\n);\n\nconst AllNotables = () => {\n  const { search } = useLocation();\n  let initialValue = getParams(search).s;\n  initialValue = typeof initialValue === \"string\" ? initialValue : \"\";\n  const [term, setTerm] = useState(initialValue);\n  const [debouncedTerm, setDebouncedTerm] = useState(initialValue);\n  const hist = useHistory();\n\n  const bounce = useRef<number>();\n\n  useEffect(() => {\n    if (term !== debouncedTerm) {\n      window.clearTimeout(bounce.current);\n      bounce.current = window.setTimeout(() => {\n        hist.replace(term ? `?s=${term}` : \"\");\n        setDebouncedTerm(term);\n      }, 250);\n    }\n    return () => window.clearTimeout(bounce.current);\n  }, [term, hist, debouncedTerm]);\n\n  return (\n    <OuterWrapper>\n      <InputWrapper>\n        <Input\n          onChange={({ target: { value } }) => setTerm(value)}\n          value={term}\n          type=\"text\"\n          placeholder=\"Search notable name or description...\"\n        />\n        {term && <Clear onClick={() => setTerm(\"\")} />}\n      </InputWrapper>\n      <List term={debouncedTerm} />\n    </OuterWrapper>\n  );\n};\n\nexport default AllNotables;\n","import React, { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport Jewels from \"./jewels.json\";\nimport Notables from \"./notables.json\";\nimport NotableCard from \"./NotablesCard\";\nimport { JewelType, NotableType } from \"./types\";\n\nconst Container = styled.div({\n  display: \"grid\",\n  gridTemplateColumns: \"1fr\",\n  gridGap: \"16px\",\n  overflowY: \"auto\",\n  overflowX: \"hidden\",\n  \"::-webkit-scrollbar\": {\n    width: \"16px\",\n    borderRight: \"8px solid #111\",\n  },\n  \"::-webkit-scrollbar-thumb\": {\n    borderRight: \"8px solid #222\",\n  },\n});\n\nconst JewelSectionHeader = styled.h3({\n  \"&:first-of-type\": { marginTop: 0 },\n  margin: \"8px 0 0\",\n});\n\nconst Jewel = styled.div({\n  backgroundColor: \"#111\",\n  padding: \"8px\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  position: \"relative\",\n});\n\nconst Enchantment = styled.div({\n  color: \"lightblue\",\n  lineHeight: \"18px\",\n  fontSize: \"14px\",\n  marginRight: \"32px\",\n});\n\nconst OuterWrapper = styled.div({\n  display: \"flex\",\n  flexDirection: \"column\",\n  width: \"100%\",\n  overflow: \"hidden\",\n  padding: \"16px\",\n});\n\nconst NotablesContainer = styled.div({\n  marginTop: \"8px\",\n  display: \"grid\",\n  gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\",\n  gridGap: \"8px\",\n});\n\nconst JewelHeader = styled.button<{ expanded?: boolean }>(\n  {\n    position: \"relative\",\n    border: \"none\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    background: \"none\",\n    cursor: \"pointer\",\n    \":focus\": { outline: \"none\" },\n    \":after\": {\n      content: `\"\"`,\n      position: \"absolute\",\n      display: \"block\",\n      right: \"4px\",\n      width: 0,\n      height: 0,\n      border: \"4px solid transparent\",\n      borderRight: \"4px solid #555\",\n      borderBottom: \"4px solid #555\",\n    },\n  },\n  ({ expanded }) => ({\n    \":after\": {\n      transform: `rotateZ(${expanded ? \"225\" : \"45\"}deg)`,\n      top: expanded ? \"5px\" : 0,\n    },\n  })\n);\n\nexport const SingleJewel = ({\n  jewel: { enchant, notables, tag, prefixWeight, suffixWeight },\n}: {\n  jewel: JewelType;\n}) => {\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <Jewel>\n      <JewelHeader onClick={() => setExpanded(!expanded)} expanded={expanded}>\n        {enchant.map((e) => (\n          <Enchantment key={e}>{e}</Enchantment>\n        ))}\n      </JewelHeader>\n      {expanded && (\n        <NotablesContainer>\n          {notables\n            .sort((a, b) =>\n              a.type !== b.type\n                ? a.type === \"Suffix\"\n                  ? 1\n                  : -1\n                : b.weight - a.weight\n            )\n            .map(({ skill }) =>\n              (Notables as NotableType[]).find((n) => n.skill === skill)\n            )\n            .map(\n              (notable) =>\n                notable && (\n                  <NotableCard\n                    key={notable.skill}\n                    weight={notable.weight?.[tag]}\n                    totalWeight={\n                      notable.type === \"Suffix\" ? suffixWeight : prefixWeight\n                    }\n                    notable={notable}\n                  />\n                )\n            )}\n        </NotablesContainer>\n      )}\n    </Jewel>\n  );\n};\n\nconst JewelSection = ({ jewels }: { jewels: JewelType[] }) => (\n  <>\n    {jewels.map((jewel) => (\n      <SingleJewel key={jewel.name} jewel={jewel} />\n    ))}\n  </>\n);\n\nconst AllJewels = () => (\n  <OuterWrapper>\n    <Container>\n      <JewelSectionHeader>Large</JewelSectionHeader>\n      <JewelSection\n        jewels={(Jewels as JewelType[]).filter(({ size }) => size === \"Large\")}\n      />\n      <JewelSectionHeader>Medium</JewelSectionHeader>\n      <JewelSection\n        jewels={(Jewels as JewelType[]).filter(({ size }) => size === \"Medium\")}\n      />\n      <JewelSectionHeader>Small</JewelSectionHeader>\n      <JewelSection\n        jewels={(Jewels as JewelType[]).filter(({ size }) => size === \"Small\")}\n      />\n    </Container>\n  </OuterWrapper>\n);\n\nexport default AllJewels;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { useParams } from \"react-router-dom\";\nimport notables from \"./notables.json\";\nimport jewels from \"./jewels.json\";\nimport { SingleJewel } from \"./AllJewels\";\nimport NotableCard from \"./NotablesCard\";\nimport { NotableType, JewelType } from \"./types\";\n\nconst Container = styled.div({\n  display: \"grid\",\n  gridTemplateColumns: \"1fr\",\n  gridGap: \"16px\",\n  overflowY: \"auto\",\n  overflowX: \"hidden\",\n  \"::-webkit-scrollbar\": {\n    width: \"16px\",\n    borderRight: \"8px solid #111\",\n  },\n  \"::-webkit-scrollbar-thumb\": {\n    borderRight: \"8px solid #222\",\n  },\n});\n\nconst OuterWrapper = styled.div({\n  display: \"flex\",\n  flexDirection: \"column\",\n  width: \"100%\",\n  overflow: \"hidden\",\n  padding: \"16px\",\n});\n\nconst Notable = () => {\n  const { id } = useParams();\n  const skill = typeof id === \"string\" ? parseInt(id, 10) : 0;\n\n  const notable = (notables as NotableType[]).find(\n    ({ skill: nskill }) => nskill === skill\n  );\n\n  const appearsOn = (jewels as JewelType[]).filter(({ notables }) =>\n    notables.some(({ skill: nskill }) => nskill === skill)\n  );\n\n  return notable ? (\n    <OuterWrapper>\n      <Container>\n        <NotableCard key={notable.skill} notable={notable} />\n        {appearsOn &&\n          appearsOn.map((jewel) => (\n            <SingleJewel key={jewel.name} jewel={jewel} />\n          ))}\n      </Container>\n    </OuterWrapper>\n  ) : null;\n};\n\nexport default Notable;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport AllNotables from \"./AllNotables\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useLocation\n} from \"react-router-dom\";\nimport AllJewels from \"./AllJewels\";\nimport SingleNotable from \"./SingleNotable\";\n\nconst OuterWrapper = styled.div({\n  overflow: \"hidden\",\n  height: \"100vh\",\n  width: \"100vw\",\n  backgroundColor: \"#555\"\n});\n\nconst Container = styled.div({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"stretch\",\n  margin: \"0 auto\",\n  maxWidth: \"980px\",\n  \"@media only screen and (min-width: 768px)\": {\n    padding: \"16px\"\n  },\n  height: \"100%\"\n});\n\nconst Box = styled.div({\n  backgroundColor: \"black\",\n  color: \"white\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  overflow: \"hidden\"\n});\n\nconst TabsContainer = styled.div({\n  borderBottom: \"1px solid orange\",\n  display: \"flex\",\n  position: \"relative\",\n  \":before\": {\n    content: `\"\"`,\n    bottom: \"0\",\n    width: \"100%\",\n    display: \"block\",\n    height: \"1px\",\n    position: \"absolute\",\n    backgroundColor: \"#000\"\n  }\n});\n\nconst Tab = styled(Link, { shouldForwardProp: prop => prop !== \"isActive\" })<{\n  isActive: Boolean;\n}>(\n  {\n    marginRight: \"4px\",\n    textDecoration: \"none\",\n    padding: \"8px\",\n    zIndex: 1\n  },\n  ({ isActive }) => ({\n    backgroundColor: isActive ? \"orange\" : \"#000\",\n    color: isActive ? \"#000\" : \"orange\"\n  })\n);\n\nconst Tabs = () => {\n  const location = useLocation();\n\n  return (\n    <TabsContainer>\n      <Tab to=\"/\" isActive={location.pathname === \"/\"}>\n        All notables\n      </Tab>\n      <Tab to=\"/jewels\" isActive={location.pathname === \"/jewels\"}>\n        Cluster jewels\n      </Tab>\n    </TabsContainer>\n  );\n};\n\nconst App = () => (\n  <Router>\n    <OuterWrapper>\n      <Container>\n        <Tabs />\n        <Box>\n          <Switch>\n            <Route path=\"/notable/:id\">\n              <SingleNotable />\n            </Route>\n            <Route path=\"/jewels\">\n              <AllJewels />\n            </Route>\n            <Route exact path=\"/\">\n              <AllNotables />\n            </Route>\n            <Redirect to=\"/\" />\n          </Switch>\n        </Box>\n      </Container>\n    </OuterWrapper>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}